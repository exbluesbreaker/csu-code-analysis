  CSU tools for code analysis.

Distributed under GNU GPLv2. See LICENSE file for details.

USAGE

* 1) logilab-astng XML Generator

This is python utility for static analysis. Its main features:
	- generation of universal class intermediate representation - UCR  (XML) for Python projects(1)
	- generation of visual representation of class hierarchy from universal class intermediate representation(2)
	- search for potential siblings in class hierarchy from universal class intermediate representation(3)
	- tracing of living objects during different runs of Python projects (bazaar,logilab etc.). This needed for checking result of in-project aggregation generation in universal class representation(4)
	- extraction of CFG for project fuctions and methods(5)
	- linking of extracted CFG and UCR(6)
	- simple visualization of linked CFG(7)
	- slicing of UCR, according to given class(8)

Project is on prototype stage and installation is not supported yet. For running you must need to add src directory of sources to PYTHONPATH environment variable and use CSUStan/main.py for run. main.py accepts two argument - type of run(-t) and optional file name of config file(-c, by default csu.ini will be used). Other paramaters must be set in config file. Example of config file presented in data/csu.ini.

Requirenments:
	Python(>= 2.6 and < 3.0)
	Graphviz
	pylint
	logilab-astng
	pydot
	lxml

Supported run types:
	ClassIR - generation of UCR for Python project(1)
    	LogilabClassIR - old-style UCR generation (deprecated)(1)
	PotentialSibling - search for potential siblings in class hierarchy(3)
	VisualHierarchy - visual representation of class relations in UCR (UML-like)(2)
	FieldCandidates - deprecated
	LogilabObjectTracer - tracing of living objects from logilab package(4)
	PylintObjectTracer - tracing of living objects from pylint package(4)
	TwistedObjectTracer -tracing of living objects from twisted package(deprecated) (4)
	SconsObjectTracer - tracing of living objects from SCons package (4)
	BazaarObjectTracer - tracing of living objects from bzrlib package (4)
	CFGExtractor - extraction of control flow graph for project(5)
	DataflowLinker - add dataflow information to CFG, according to UCR(6)
	CFGVisualizer - simple svg-based visualizer of CFG(7)
	ClassSlicer - slice UCR, for class of interest(8)

	Extraction of UCR and CFG needs name of top-level module of project as project argument in config file. If you want to analyze module, which not installed in standard location in system (for example site-packages directory), you need to add directory, which contains top-level module of project to PYTHONPATH.

Command line for run:
	PYTHONPATH=$PYTHONPATH:<path to csu-code-analysis/logilab-astng XML Generator/src>[:<path to project directory for analysis>] python <path to CSUStan/main.py> -t <run type> [-c <alternative config>]
E.G.:
	PYTHONPATH=$PYTHONPATH:/home/stranger/csu-code-analysis/logilab-astng\ XML\ Generator/src python /home/stranger/csu-code-analysis/logilab-astng\ XML\ Generator/src/CSUStan/main.py -t ClassIR -c my.ini
	
	Example of config can be found in data/csu.ini

* 2) Java-XML

This is Java util for static analysis. It analyse source code written in Java. It's main features:
	- generation of control-flow graph (CFG) for Java projects
	- generation of universal class intermediate representation (UCR) for Java projects
	- generation of abstract syntax tree XML representation

AST generation modules are based on javac compiler's sources from OpenJDK, distributed under GNU GPL.

To build all tools use Apache Ant int java-xml directory. Default target will build all modules.
To use tools simply run tools.sh script and follow it's instructions.
